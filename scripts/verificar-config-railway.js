#!/usr/bin/env node

/**
 * Script para verificar se todas as vari√°veis de ambiente necess√°rias est√£o configuradas
 * para o deploy no Railway
 */

require('dotenv').config();
const logger = require('../src/utils/logger');

// Lista de vari√°veis obrigat√≥rias
const REQUIRED_VARS = [
  'SUPABASE_URL',
  'SUPABASE_ANON_KEY', 
  'SUPABASE_SERVICE_ROLE_KEY',
  'WHATSAPP_ACCESS_TOKEN',
  'WHATSAPP_PHONE_NUMBER_ID',
  'WHATSAPP_BUSINESS_ACCOUNT_ID',
  'WHATSAPP_WEBHOOK_VERIFY_TOKEN'
];

// Lista de vari√°veis opcionais com valores padr√£o
const OPTIONAL_VARS = [
  'PORT',
  'NODE_ENV',
  'LOG_LEVEL',
  'DEFAULT_TIMEZONE',
  'CRON_TIMEZONE',
  'SCHEDULER_INTERVAL_MINUTES',
  'RATE_LIMIT_WINDOW_MS',
  'RATE_LIMIT_MAX_REQUESTS',
  'MAX_RETRY_ATTEMPTS',
  'RETRY_DELAY_MS',
  'HEALTH_CHECK_INTERVAL_MS'
];

function checkEnvironmentVariables() {
  console.log('üîç Verificando configura√ß√µes para Railway...\n');
  
  let hasErrors = false;
  let hasWarnings = false;
  
  // Verificar vari√°veis obrigat√≥rias
  console.log('üìã Vari√°veis Obrigat√≥rias:');
  REQUIRED_VARS.forEach(varName => {
    const value = process.env[varName];
    if (!value || value === 'your_' + varName.toLowerCase() + '_here') {
      console.log(`‚ùå ${varName}: N√ÉO CONFIGURADA`);
      hasErrors = true;
    } else {
      console.log(`‚úÖ ${varName}: Configurada`);
    }
  });
  
  console.log('\nüìã Vari√°veis Opcionais:');
  OPTIONAL_VARS.forEach(varName => {
    const value = process.env[varName];
    if (!value) {
      console.log(`‚ö†Ô∏è  ${varName}: Usando valor padr√£o`);
      hasWarnings = true;
    } else {
      console.log(`‚úÖ ${varName}: ${value}`);
    }
  });
  
  // Verificar Node.js version
  console.log('\nüìã Vers√£o do Node.js:');
  const nodeVersion = process.version;
  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
  
  if (majorVersion >= 20) {
    console.log(`‚úÖ Node.js ${nodeVersion}: Compat√≠vel`);
  } else {
    console.log(`‚ùå Node.js ${nodeVersion}: Vers√£o desatualizada (m√≠nimo: 20.x)`);
    hasErrors = true;
  }
  
  // Verificar se est√° em produ√ß√£o
  console.log('\nüìã Ambiente:');
  const nodeEnv = process.env.NODE_ENV;
  if (nodeEnv === 'production') {
    console.log('‚úÖ NODE_ENV: production');
  } else {
    console.log(`‚ö†Ô∏è  NODE_ENV: ${nodeEnv || 'development'} (recomendado: production)`);
    hasWarnings = true;
  }
  
  // Resultado final
  console.log('\n' + '='.repeat(50));
  if (hasErrors) {
    console.log('‚ùå ERRO: Configura√ß√£o incompleta!');
    console.log('\nüìù A√ß√µes necess√°rias:');
    console.log('1. Configure todas as vari√°veis obrigat√≥rias no Railway');
    console.log('2. Verifique o arquivo RAILWAY_DEPLOY_GUIDE.md');
    console.log('3. Fa√ßa um novo deploy ap√≥s configurar');
    process.exit(1);
  } else if (hasWarnings) {
    console.log('‚ö†Ô∏è  AVISO: Configura√ß√£o com warnings');
    console.log('\nüìù Recomenda√ß√µes:');
    console.log('1. Configure as vari√°veis opcionais para melhor performance');
    console.log('2. Defina NODE_ENV=production');
    console.log('3. Fa√ßa um novo deploy');
  } else {
    console.log('‚úÖ SUCESSO: Configura√ß√£o completa!');
    console.log('\nüöÄ Pronto para deploy no Railway!');
  }
  
  console.log('\nüìö Documenta√ß√£o:');
  console.log('- Guia completo: RAILWAY_DEPLOY_GUIDE.md');
  console.log('- Exemplo de vari√°veis: railway.env');
}

// Executar verifica√ß√£o
if (require.main === module) {
  checkEnvironmentVariables();
}

module.exports = { checkEnvironmentVariables, REQUIRED_VARS, OPTIONAL_VARS };
