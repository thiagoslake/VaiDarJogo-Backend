require('dotenv').config();
const ConfirmationService = require('../src/services/ConfirmationService');
const GameConfirmation = require('../src/models/GameConfirmation');

class DebugProcessSendConfigDetalhado {
  constructor() {
    this.confirmationService = ConfirmationService;
    this.gameConfirmation = GameConfirmation;
  }

  async debugProcessSendConfigDetalhado() {
    console.log('üîç DEBUG DETALHADO DO PROCESSSENDCONFIG\n');

    const gameId = 'ec0dbd33-11d3-4338-902c-26a4ea3275e4';
    
    try {
      // 1. Buscar configura√ß√£o do jogo
      console.log('1Ô∏è‚É£ Buscando configura√ß√£o do jogo...');
      const game = await this.gameConfirmation.getGameConfirmationConfig(gameId);
      if (!game) {
        console.log('‚ùå Jogo sem configura√ß√£o de confirma√ß√£o');
        return;
      }
      console.log('‚úÖ Configura√ß√£o encontrada');

      // 2. Buscar pr√≥xima sess√£o
      console.log('\n2Ô∏è‚É£ Buscando pr√≥xima sess√£o...');
      const nextSession = await this.gameConfirmation.getNextSession(gameId);
      if (!nextSession) {
        console.log('‚ùå Nenhuma pr√≥xima sess√£o encontrada');
        return;
      }
      console.log(`‚úÖ Pr√≥xima sess√£o: ${nextSession.session_date}`);

      // 3. Verificar configura√ß√µes de envio
      console.log('\n3Ô∏è‚É£ Verificando configura√ß√µes de envio...');
      const sendConfigs = game.confirmation_send_configs || [];
      console.log(`üìä Total de configura√ß√µes: ${sendConfigs.length}`);

      // 4. For√ßar shouldSendNow para retornar true
      console.log('\n4Ô∏è‚É£ Modificando l√≥gica de hor√°rio...');
      const originalShouldSendNow = this.confirmationService.shouldSendNow.bind(this.confirmationService);
      this.confirmationService.shouldSendNow = () => {
        console.log('   ‚ö†Ô∏è For√ßando envio (ignorando hor√°rio)');
        return true;
      };

      // 5. Testar cada configura√ß√£o individualmente
      console.log('\n5Ô∏è‚É£ Testando cada configura√ß√£o...');
      let totalProcessed = 0;
      let totalSent = 0;
      let totalErrors = 0;

      for (let i = 0; i < sendConfigs.length; i++) {
        const sendConfig = sendConfigs[i];
        console.log(`\n   üìã Configura√ß√£o ${i + 1}: ${sendConfig.player_type} (${sendConfig.hours_before_game}h antes)`);
        
        try {
          // Verificar se deve enviar
          const shouldSend = this.confirmationService.shouldSendNow(nextSession.session_date, sendConfig.hours_before_game);
          console.log(`   ‚è∞ Deve enviar: ${shouldSend ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
          
          if (!shouldSend) {
            console.log('   ‚è≠Ô∏è Pulando (n√£o √© hora de enviar)');
            continue;
          }

          // Buscar jogadores
          console.log(`   üîç Buscando jogadores do tipo ${sendConfig.player_type}...`);
          const players = await this.confirmationService.getPlayersForConfirmation(gameId, sendConfig.player_type);
          console.log(`   üìä Jogadores encontrados: ${players.length}`);
          
          if (players.length === 0) {
            console.log('   ‚è≠Ô∏è Pulando (nenhum jogador encontrado)');
            continue;
          }

          // Listar jogadores
          players.forEach((player, index) => {
            console.log(`     ${index + 1}. ${player.players?.name || 'Nome n√£o encontrado'}`);
            console.log(`        Telefone: ${player.players?.phone_number || 'N√ÉO INFORMADO'}`);
            console.log(`        ID: ${player.id}`);
          });

          // Processar cada jogador
          console.log(`   üîß Processando ${players.length} jogadores...`);
          let processed = 0;
          let sent = 0;
          let errors = 0;

          for (const player of players) {
            try {
              processed++;
              console.log(`     üë§ Processando: ${player.players?.name || 'Nome n√£o encontrado'}`);
              console.log(`        ID: ${player.id}`);
              
              // Verificar se j√° confirmou
              console.log(`        üîç Verificando se j√° confirmou...`);
              const hasConfirmed = await this.confirmationService.gameConfirmation.hasPlayerConfirmed(
                player.id, 
                nextSession.session_date
              );
              console.log(`        ‚úÖ J√° confirmou: ${hasConfirmed ? 'SIM' : 'N√ÉO'}`);

              if (hasConfirmed) {
                console.log(`        ‚è≠Ô∏è Pulando (j√° confirmou)`);
                continue;
              }

              // Verificar se j√° foi enviado
              console.log(`        üîç Verificando se j√° foi enviado...`);
              const alreadySent = await this.confirmationService.checkIfAlreadySent(
                player.id, 
                nextSession.session_date, 
                sendConfig.id
              );
              console.log(`        üì§ J√° foi enviado: ${alreadySent ? 'SIM' : 'N√ÉO'}`);

              if (alreadySent) {
                console.log(`        ‚è≠Ô∏è Pulando (j√° foi enviado)`);
                continue;
              }

              // Verificar se tem telefone
              if (!player.players?.phone_number) {
                console.log(`        ‚ùå Pulando: Telefone n√£o informado`);
                errors++;
                continue;
              }

              // Tentar enviar mensagem
              console.log(`        üì± Tentando enviar mensagem...`);
              const result = await this.confirmationService.whatsappService.sendConfirmationMessage(
                player.players,
                { id: gameId },
                nextSession,
                sendConfig
              );

              if (result.success) {
                sent++;
                console.log(`        ‚úÖ Mensagem enviada com sucesso`);
              } else {
                errors++;
                console.log(`        ‚ùå Erro ao enviar: ${result.error || 'Erro desconhecido'}`);
              }

            } catch (error) {
              errors++;
              console.log(`        ‚ùå Erro ao processar jogador: ${error.message}`);
            }
          }

          console.log(`   üìä Resultado da configura√ß√£o:`);
          console.log(`      Processados: ${processed}`);
          console.log(`      Enviados: ${sent}`);
          console.log(`      Erros: ${errors}`);

          totalProcessed += processed;
          totalSent += sent;
          totalErrors += errors;

        } catch (error) {
          console.log(`   ‚ùå Erro ao processar configura√ß√£o: ${error.message}`);
          totalErrors++;
        }
      }

      // 6. Restaurar m√©todo original
      this.confirmationService.shouldSendNow = originalShouldSendNow;
      console.log('\n‚úÖ M√©todo de hor√°rio restaurado');

      // 7. Resultado final
      console.log('\nüìä RESULTADO FINAL:');
      console.log(`   üìä Total processados: ${totalProcessed}`);
      console.log(`   üì§ Total enviados: ${totalSent}`);
      console.log(`   ‚ùå Total erros: ${totalErrors}`);

      if (totalProcessed > 0) {
        console.log('\nüéâ SUCESSO! O sistema est√° funcionando!');
      } else {
        console.log('\n‚ö†Ô∏è PROBLEMA: Nenhum jogador foi processado');
        console.log('   Poss√≠veis causas:');
        console.log('   1. shouldSendNow retornando false');
        console.log('   2. getPlayersForConfirmation retornando array vazio');
        console.log('   3. hasPlayerConfirmed retornando true para todos');
        console.log('   4. checkIfAlreadySent retornando true para todos');
        console.log('   5. Erro no sendConfirmationMessage');
      }

    } catch (error) {
      console.log('‚ùå Erro geral:', error.message);
      console.log('Stack:', error.stack);
    }
  }
}

// Executar
async function main() {
  const debug = new DebugProcessSendConfigDetalhado();
  await debug.debugProcessSendConfigDetalhado();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = DebugProcessSendConfigDetalhado;

