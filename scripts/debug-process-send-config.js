require('dotenv').config();
const ConfirmationService = require('../src/services/ConfirmationService');
const GameConfirmation = require('../src/models/GameConfirmation');

class DebugProcessSendConfig {
  constructor() {
    this.confirmationService = ConfirmationService;
    this.gameConfirmation = GameConfirmation;
  }

  async debugProcessSendConfig() {
    console.log('üîç DEBUGANDO processSendConfig DETALHADAMENTE\n');

    const gameId = 'ec0dbd33-11d3-4338-902c-26a4ea3275e4';
    
    try {
      // 1. Buscar configura√ß√£o do jogo
      console.log('1Ô∏è‚É£ Buscando configura√ß√£o do jogo...');
      const game = await this.gameConfirmation.getGameConfirmationConfig(gameId);
      if (!game) {
        console.log('‚ùå Jogo sem configura√ß√£o de confirma√ß√£o');
        return;
      }
      console.log('‚úÖ Configura√ß√£o encontrada');

      // 2. Buscar pr√≥xima sess√£o
      console.log('\n2Ô∏è‚É£ Buscando pr√≥xima sess√£o...');
      const nextSession = await this.gameConfirmation.getNextSession(gameId);
      if (!nextSession) {
        console.log('‚ùå Nenhuma pr√≥xima sess√£o encontrada');
        return;
      }
      console.log(`‚úÖ Pr√≥xima sess√£o: ${nextSession.session_date}`);

      // 3. Testar cada configura√ß√£o de envio individualmente
      console.log('\n3Ô∏è‚É£ Testando cada configura√ß√£o de envio...');
      const sendConfigs = game.confirmation_send_configs || [];
      
      for (let i = 0; i < sendConfigs.length; i++) {
        const sendConfig = sendConfigs[i];
        console.log(`\n   üìã Configura√ß√£o ${i + 1}: ${sendConfig.player_type} (${sendConfig.hours_before_game}h antes)`);
        
        try {
          // For√ßar shouldSendNow para retornar true
          const originalShouldSendNow = this.confirmationService.shouldSendNow.bind(this.confirmationService);
          this.confirmationService.shouldSendNow = () => {
            console.log('     ‚ö†Ô∏è For√ßando envio (ignorando hor√°rio)');
            return true;
          };

          // Buscar jogadores para esta configura√ß√£o
          console.log(`     üîç Buscando jogadores do tipo ${sendConfig.player_type}...`);
          const players = await this.confirmationService.getPlayersForConfirmation(gameId, sendConfig.player_type);
          console.log(`     üìä Jogadores encontrados: ${players.length}`);
          
          if (players.length > 0) {
            players.forEach((player, index) => {
              console.log(`       ${index + 1}. ${player.players?.name || 'Nome n√£o encontrado'}`);
              console.log(`          Telefone: ${player.players?.phone_number || 'N√ÉO INFORMADO'}`);
            });

            // Testar processSendConfig diretamente
            console.log(`     üîß Testando processSendConfig...`);
            const result = await this.confirmationService.processSendConfig(
              { id: gameId }, 
              nextSession, 
              sendConfig
            );
            
            console.log(`     üìä Resultado:`);
            console.log(`        Processados: ${result.processed}`);
            console.log(`        Enviados: ${result.sent}`);
            console.log(`        Erros: ${result.errors}`);
          } else {
            console.log(`     ‚ö†Ô∏è Nenhum jogador encontrado para este tipo`);
          }

          // Restaurar m√©todo original
          this.confirmationService.shouldSendNow = originalShouldSendNow;

        } catch (error) {
          console.log(`     ‚ùå Erro ao processar configura√ß√£o: ${error.message}`);
        }
      }

    } catch (error) {
      console.log('‚ùå Erro geral:', error.message);
      console.log('Stack:', error.stack);
    }
  }
}

// Executar
async function main() {
  const debug = new DebugProcessSendConfig();
  await debug.debugProcessSendConfig();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = DebugProcessSendConfig;
