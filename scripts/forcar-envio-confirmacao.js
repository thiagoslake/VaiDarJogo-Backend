require('dotenv').config();
const ConfirmationService = require('../src/services/ConfirmationService');
const GameConfirmation = require('../src/models/GameConfirmation');

class ForcarEnvioConfirmacao {
  constructor() {
    this.confirmationService = ConfirmationService;
    this.gameConfirmation = GameConfirmation;
  }

  async forcarEnvio() {
    console.log('üîß FOR√áANDO ENVIO DE CONFIRMA√á√ïES (IGNORANDO HOR√ÅRIO)\n');

    const gameId = 'ec0dbd33-11d3-4338-902c-26a4ea3275e4';
    
    try {
      // 1. Buscar configura√ß√£o do jogo
      console.log('1Ô∏è‚É£ Buscando configura√ß√£o do jogo...');
      const game = await this.gameConfirmation.getGameConfirmationConfig(gameId);
      if (!game) {
        console.log('‚ùå Jogo sem configura√ß√£o de confirma√ß√£o');
        return;
      }
      console.log('‚úÖ Configura√ß√£o encontrada');

      // 2. Buscar pr√≥xima sess√£o
      console.log('\n2Ô∏è‚É£ Buscando pr√≥xima sess√£o...');
      const nextSession = await this.gameConfirmation.getNextSession(gameId);
      if (!nextSession) {
        console.log('‚ùå Nenhuma pr√≥xima sess√£o encontrada');
        return;
      }
      console.log(`‚úÖ Pr√≥xima sess√£o: ${nextSession.session_date}`);

      // 3. Temporariamente modificar o m√©todo shouldSendNow para sempre retornar true
      console.log('\n3Ô∏è‚É£ Modificando l√≥gica de hor√°rio para for√ßar envio...');
      const originalShouldSendNow = this.confirmationService.shouldSendNow.bind(this.confirmationService);
      this.confirmationService.shouldSendNow = () => {
        console.log('   ‚ö†Ô∏è For√ßando envio (ignorando hor√°rio)');
        return true;
      };

      // 4. Processar confirma√ß√µes
      console.log('\n4Ô∏è‚É£ Processando confirma√ß√µes...');
      const result = await this.confirmationService.processGameConfirmations(game);
      
      console.log('\nüìä RESULTADO DO ENVIO FOR√áADO:');
      console.log(`   üìä Processados: ${result.processed}`);
      console.log(`   üì§ Enviados: ${result.sent}`);
      console.log(`   ‚ùå Erros: ${result.errors}`);

      // 5. Restaurar m√©todo original
      this.confirmationService.shouldSendNow = originalShouldSendNow;
      console.log('\n‚úÖ M√©todo de hor√°rio restaurado');

      if (result.processed > 0) {
        console.log('\nüéâ SUCESSO! O sistema est√° funcionando!');
        console.log('   O problema era apenas o hor√°rio de envio.');
        console.log('   As confirma√ß√µes ser√£o enviadas automaticamente nos hor√°rios configurados.');
      } else {
        console.log('\n‚ö†Ô∏è Ainda h√° problemas no sistema.');
        console.log('   Verifique os logs para mais detalhes.');
      }

    } catch (error) {
      console.log('‚ùå Erro geral:', error.message);
      console.log('Stack:', error.stack);
    }
  }
}

// Executar
async function main() {
  const forcar = new ForcarEnvioConfirmacao();
  await forcar.forcarEnvio();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = ForcarEnvioConfirmacao;



